/*
 * This file is part of Tectuinno IDE.
 *
 * Tectuinno IDE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction. Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License. This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 *
 * Copyright 2025 Tectuinno Team (https://github.com/tectuinno)
 */

package org.tectuinno.view.component;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import java.awt.BorderLayout;
import javax.swing.JTextArea;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.util.Locale;

/**
 * A Swing panel that displays the disassembly output (e.g., from an Objdump process)
 * in a styled, read-only text terminal.
 * <p>
 * This component provides:
 * <ul>
 *     <li>A scrollable text area with terminal-like appearance</li>
 *     <li>Initial header formatting for the disassembly output</li>
 *     <li>A method to overwrite and append new disassembly results</li>
 * </ul>
 *
 * <h2>Key Features:</h2>
 * <table border="1">
 *   <caption>DisassemblyTerminalPanel Responsibilities</caption>
 *   <tr>
 *     <th>Method</th>
 *     <th>Description</th>
 *   </tr>
 *   <tr>
 *     <td>{@link #writteIn(String)}</td>
 *     <td>Clears the terminal and writes new disassembly content</td>
 *   </tr>
 *   <tr>
 *     <td>{@link #setInitialText()}</td>
 *     <td>Generates the initial header text for the terminal</td>
 *   </tr>
 * </table>
 *
 * @see JTextArea
 * @see JScrollPane
 * @author Pablo
 * @version 1.0
 * @since 2025-08-14
 */
public class DisassemblyTerminalPanel extends JPanel {

	private static final long serialVersionUID = 1L;
	private final JScrollPane scrollPane = new JScrollPane();
	private final JTextArea txaDisassemblyResult = new JTextArea();

	/**
	 * Create the panel.
	 */
	public DisassemblyTerminalPanel() {
		
		setLayout(new BorderLayout(0, 0));
		{
			add(scrollPane);
		}
		
		{/*Configuring the disassembly text terminal*/
			
			String initialText = this.setInitialText();
			txaDisassemblyResult.setText(initialText);
			txaDisassemblyResult.setLocale(new Locale("es", "MX"));
			txaDisassemblyResult.setForeground(new Color(0, 204, 0));
			txaDisassemblyResult.setFont(new Font("Lucida Fax", Font.PLAIN, 12));
			txaDisassemblyResult.setEditable(false);
			txaDisassemblyResult.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
			txaDisassemblyResult.setCaretColor(Color.WHITE);
			txaDisassemblyResult.setBackground(new Color(51, 51, 51));
			scrollPane.setViewportView(txaDisassemblyResult);
		}		
		
	}
	
	/**
     * Clears the terminal and writes the provided text, preceded by the
     * default header text generated by {@link #setInitialText()}.
     *
     * @param text the disassembly output to display
     */
	public void writteIn(String text) {
		this.txaDisassemblyResult.setText("");
		this.txaDisassemblyResult.setText(this.setInitialText());
		this.txaDisassemblyResult.append("\n");
		this.txaDisassemblyResult.append(text);
	}
	
	/**
     * Generates the default header text for the terminal, including a title
     * and separators.
     *
     * @return a {@code String} containing the initial formatted header
     */
	private final String setInitialText() {
		
		return new StringBuilder()
				.append("\n")
				.append("**********************************************************************************\n\r")
				.append("\t Objdumb Code Dissasembly \n")
				.append("**********************************************************************************\n\r")
				.toString();
		
	}

}
